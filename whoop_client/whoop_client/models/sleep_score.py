# coding: utf-8

"""
    WHOOP API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from pydantic import Field
from whoop_client.models.sleep_needed import SleepNeeded
from whoop_client.models.sleep_stage_summary import SleepStageSummary
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SleepScore(BaseModel):
    """
    WHOOP's measurements and evaluation of the sleep activity. Only present if the Sleep State is `SCORED`
    """ # noqa: E501
    stage_summary: SleepStageSummary
    sleep_needed: SleepNeeded
    respiratory_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The user's respiratory rate during the sleep.")
    sleep_performance_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A percentage (0-100%) of the time a user is asleep over the amount of sleep the user needed. May not be reported if WHOOP does not have enough data about a user yet to calculate Sleep Need.")
    sleep_consistency_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage (0-100%) of how similar this sleep and wake times compared to the previous day. May not be reported if WHOOP does not have enough sleep data about a user yet to understand consistency.")
    sleep_efficiency_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A percentage (0-100%) of the time you spend in bed that you are actually asleep.")
    __properties: ClassVar[List[str]] = ["stage_summary", "sleep_needed", "respiratory_rate", "sleep_performance_percentage", "sleep_consistency_percentage", "sleep_efficiency_percentage"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SleepScore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stage_summary
        if self.stage_summary:
            _dict['stage_summary'] = self.stage_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sleep_needed
        if self.sleep_needed:
            _dict['sleep_needed'] = self.sleep_needed.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SleepScore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "stage_summary": SleepStageSummary.from_dict(obj.get("stage_summary")) if obj.get("stage_summary") is not None else None,
            "sleep_needed": SleepNeeded.from_dict(obj.get("sleep_needed")) if obj.get("sleep_needed") is not None else None,
            "respiratory_rate": obj.get("respiratory_rate"),
            "sleep_performance_percentage": obj.get("sleep_performance_percentage"),
            "sleep_consistency_percentage": obj.get("sleep_consistency_percentage"),
            "sleep_efficiency_percentage": obj.get("sleep_efficiency_percentage")
        })
        return _obj


