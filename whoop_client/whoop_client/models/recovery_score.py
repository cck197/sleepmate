# coding: utf-8

"""
    WHOOP API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RecoveryScore(BaseModel):
    """
    WHOOP's measurements and evaluation of the recovery. Only present if the Recovery State is `SCORED`
    """ # noqa: E501
    user_calibrating: StrictBool = Field(description="True if the user is still calibrating and not enough data is available in WHOOP to provide an accurate recovery.")
    recovery_score: Union[StrictFloat, StrictInt] = Field(description="Percentage (0-100%) that reflects how well prepared the user's body is to take on Strain. The Recovery score is a measure of the user body's \"return to baseline\" after a stressor.")
    resting_heart_rate: Union[StrictFloat, StrictInt] = Field(description="The user's resting heart rate.")
    hrv_rmssd_milli: Union[StrictFloat, StrictInt] = Field(description="The user's Heart Rate Variability measured using Root Mean Square of Successive Differences (RMSSD), in milliseconds.")
    spo2_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of oxygen in the user's blood. Only present if the user is on 4.0 or greater.")
    skin_temp_celsius: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The user's skin temperature, in Celsius. Only present if the user is on 4.0 or greater.")
    __properties: ClassVar[List[str]] = ["user_calibrating", "recovery_score", "resting_heart_rate", "hrv_rmssd_milli", "spo2_percentage", "skin_temp_celsius"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RecoveryScore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RecoveryScore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_calibrating": obj.get("user_calibrating"),
            "recovery_score": obj.get("recovery_score"),
            "resting_heart_rate": obj.get("resting_heart_rate"),
            "hrv_rmssd_milli": obj.get("hrv_rmssd_milli"),
            "spo2_percentage": obj.get("spo2_percentage"),
            "skin_temp_celsius": obj.get("skin_temp_celsius")
        })
        return _obj


